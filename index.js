// index.js
import 'dotenv/config';
import axios from 'axios';
import cron from 'node-cron';
import dayjs from 'dayjs';
import utc from 'dayjs/plugin/utc.js';
import tz from 'dayjs/plugin/timezone.js';
import 'dayjs/locale/ru.js';
import pLimit from 'p-limit';

dayjs.extend(utc);
dayjs.extend(tz);
dayjs.locale('ru');

const {
  BITRIX_BASE_URL,
  BITRIX_WEBHOOK,
  TZ = 'Asia/Almaty',
  CRON_SCHEDULE = '0 9 * * *',
  TASKS_EXCLUDE_COMPLETED = 'true',
  DAY_SPAN_HOURS = '24',
  ONLY_USER_ID,                 // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Ç–µ—Å—Ç –Ω–∞ –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 41)
  CALENDAR_CHECK_PERMS = 'true' // 1 = –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø—Ä–∞–≤–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è, 0 = –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å
} = process.env;

if (!BITRIX_BASE_URL || !BITRIX_WEBHOOK) {
  console.error('‚ùå –ó–∞–ø–æ–ª–Ω–∏ BITRIX_BASE_URL –∏ BITRIX_WEBHOOK –≤ .env');
  process.exit(1);
}

// –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å–∫–ª–µ–π–∫–∞: .../rest/1/KEY/
const baseURL =
  `${BITRIX_BASE_URL.replace(/\/+$/, '')}` +
  `${BITRIX_WEBHOOK.replace(/\/+$/, '')}/`;

const api = axios.create({ baseURL, timeout: 20000 });

// –º–∞—Å–∫–∏—Ä—É–µ–º –∫–ª—é—á –≤ –ª–æ–≥–∞—Ö –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å
api.interceptors.request.use(cfg => {
  const safeBase = (api.defaults.baseURL || '').replace(/(\/rest\/\d+\/)[^/]+/, '$1***');
  const path = (cfg.url || '').split('?')[0];
  console.log('‚Üí', safeBase + path);
  return cfg;
});

// —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ REST —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏
async function call(method, params = {}) {
  const m = String(method).replace(/^\/+/, '');
  const url = `${m}.json`;
  try {
    const res = await api.get(url, { params });
    if (res.data && res.data.error) {
      throw new Error(`${m}: ${res.data.error_description || res.data.error}`);
    }
    return res.data.result;
  } catch (e) {
    const status = e?.response?.status;
    const data = e?.response?.data;
    const desc = data?.error_description || data?.error || e.message;
    throw new Error(`${m}: ${status || ''} ${desc}`.trim());
  }
}

// --- –¥–∞–Ω–Ω—ã–µ ---

async function getActiveUsers() {
  const users = await call('user.get', { FILTER: { ACTIVE: true } });
  let filtered = users.filter(u => String(u.ACTIVE) === 'true' && !u.IS_BOT && !u.IS_EXTRANET);
  if (ONLY_USER_ID) filtered = filtered.filter(u => Number(u.ID) === Number(ONLY_USER_ID));
  return filtered;
}

async function getTodaysEvents(userId) {
  const now = dayjs().tz(TZ);
  const dayStart = now.startOf('day');
  const spanHours = Number(DAY_SPAN_HOURS) || 24;

  const from = dayStart.format('YYYY-MM-DD[T]HH:mm:ssZZ');
  const to = dayStart.add(spanHours, 'hour').subtract(1, 'second').format('YYYY-MM-DD[T]HH:mm:ssZZ');

  const result = await call('calendar.event.get', {
    type: 'user',
    ownerId: userId,
    from,
    to,
    'params[checkPermissions]': String(CALENDAR_CHECK_PERMS).toLowerCase() === 'true' ? 1 : 0,
  });
  return result || [];
}

// —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å —Ö–≤–æ—Å—Ç
async function getOpenTasks(userId) {
  const filter = { RESPONSIBLE_ID: userId };
  if (String(TASKS_EXCLUDE_COMPLETED).toLowerCase() === 'true') filter['!=STATUS'] = 5;

  const select = ['ID', 'TITLE', 'STATUS', 'DEADLINE', 'CREATED_DATE', 'RESPONSIBLE_ID'];
  const order = { DEADLINE: 'asc' };

  let start = 0;
  const tasks = [];
  for (let i = 0; i < 10; i++) {
    const result = await call('tasks.task.list', { filter, select, order, start });
    const batch = result?.tasks || [];
    tasks.push(...batch);
    if (!result?.next) break;
    start = result.next;
  }
  return tasks;
}

// --- –æ—Ç–ø—Ä–∞–≤–∫–∞ ---

function sanitizeMessage(s, max = 3500) {
  const cleaned = String(s).replace(/\r/g, '').trim();
  return cleaned.length > max ? cleaned.slice(0, max - 3) + '‚Ä¶' : cleaned;
}

async function sendImMessageToUser(userId, message) {
  const dialogId = `user${userId}`;
  const msg = sanitizeMessage(message);

  try {
    await call('im.message.add', { DIALOG_ID: dialogId, MESSAGE: msg });
  } catch (err) {
    // —Ñ–æ–ª–±—ç–∫ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const isThisMethod = /im\.message\.add/i.test(err.message);
    const is400 = / 400 /i.test(err.message);
    if (isThisMethod && is400) {
      console.warn(`im.message.add ‚Üí 400, fallback –Ω–∞ im.notify.personal.add –¥–ª—è user ${userId}`);
      await call('im.notify.personal.add', { USER_ID: userId, MESSAGE: msg });
      return;
    }
    throw err;
  }
}

// --- —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ---

function formatTask(t) {
  return `‚Ä¢ [#${t.id || t.ID}] ${t.title || t.TITLE}`;
}

function formatEvent(ev) {
  const title = ev.NAME || ev.name || '(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)';
  // –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Ö. location –≤–∏–¥–∞ "calendar_93"
  let loc = '';
  if (ev.LOCATION && ev.LOCATION !== 'false' && !/^calendar_\d+/.test(ev.LOCATION)) {
    loc = ` ‚Ä¢ ${ev.LOCATION}`;
  }
  // –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –≤–æ–æ–±—â–µ
  return `‚Ä¢ ${title}${loc}`;
}

// --- –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É ---

async function sendDailyDigest(user) {
  const userId = user.ID || user.Id;
  const [events, tasks] = await Promise.all([getTodaysEvents(userId), getOpenTasks(userId)]);

  const todayStr = dayjs().tz(TZ).format('DD.MM.YYYY (dddd)');

  const evLines = events.length ? events.map(formatEvent).join('\n') : '‚Ä¢ –°–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç';
  const taskLines = tasks.length
    ? tasks.slice(0, 15).map(formatTask).join('\n') + (tasks.length > 15 ? `\n‚Ä¶ –∏ –µ—â—ë ${tasks.length - 15}` : '')
    : '‚Ä¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç';

  const msg = `–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, ${user.NAME || user.NAME_FORMAT || ''}! üëã
–í–∞—à –¥–∞–π–¥–∂–µ—Å—Ç –Ω–∞ ${todayStr}:

üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å:
${evLines}

‚úÖ –ó–∞–¥–∞—á–∏:
${taskLines}

–î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –≤ –ë–∏—Ç—Ä–∏–∫—Å24: –∫–ª–∏–∫–Ω—É—Ç—å —Å–ø—Ä–∞–≤–∞ –≤–≤–µ—Ä—Ö—É –Ω–∞ —Å–≤–æ–π –∞–≤–∞—Ç–∞—Ä –∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å". 
–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è –∏ –±–æ–ª—å—à–∏—Ö —É—Å–ø–µ—Ö–æ–≤ –≤ –Ω–∞—à–µ–º –æ–±—â–µ–º –¥–µ–ª–µ!`;

  await sendImMessageToUser(userId, msg);
}

// --- –∑–∞–ø—É—Å–∫ ---

async function runOnce() {
  console.log(`‚ñ∂Ô∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞: ${dayjs().tz(TZ).format()}`);
  const users = await getActiveUsers();
  if (!users.length) {
    console.warn('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
    return;
  }

  const limit = pLimit(4);
  const jobs = users.map(u =>
    limit(() =>
      sendDailyDigest(u)
        .then(() => console.log(`‚úì –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${u.ID} ${u.NAME}`))
        .catch(err => console.error(`‚úó –û—à–∏–±–∫–∞ ${u.ID} ${u.NAME}:`, err.message))
    )
  );

  await Promise.all(jobs);
  console.log('‚úÖ –î–∞–π–¥–∂–µ—Å—Ç –≥–æ—Ç–æ–≤.');
}

function schedule() {
  cron.schedule(
    CRON_SCHEDULE,
    () => { runOnce().catch(err => console.error('runOnce error:', err)); },
    { timezone: TZ }
  );
  console.log(`‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω: "${CRON_SCHEDULE}" (${TZ})`);
}

// entrypoint
if (process.argv.includes('--now')) {
  runOnce().catch(err => console.error(err));
} else {
  schedule();
}
